-- Function: "FUNC_LOG_ALTERACAO_INSERT_MOTIVO"()

-- DROP FUNCTION "FUNC_LOG_ALTERACAO_INSERT_MOTIVO"();
CREATE OR REPLACE FUNCTION "FUNC_LOG_ALTERACAO_INSERT_FICHAHA"()
  RETURNS "trigger" AS
$BODY$
begin

INSERT INTO LOG_ALTERACAO_USUARIO (CD_USUARIO,CD_SISTEMA_EXT,NM_TABELA,ID_KEY,DT_INSERCAO,DT_SINCRONISMO,TP_OPERACAO)
SELECT NEW.CD_AGENTE,
       'PALM' AS CD_SISTEMA_EXT,
       'FICHAHA' AS NM_TABELA,
       ('CD_FAMILIA=' || CAST(NEW.CD_FAMILIA AS VARCHAR(20)) || ';CD_PACIENTE='|| CAST(NEW.CD_PACIENTE AS VARCHAR(20)) 
	|| ';CD_AGENTE=' || CAST(NEW.CD_AGENTE AS VARCHAR(20))  ) AS ID_KEY,
       current_timestamp AS DT_INSERCAO,
       NULL AS DT_SINCRONISMO,
       'I' AS TP_OPERACAO;
return null;
end;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE;
ALTER FUNCTION "FUNC_LOG_ALTERACAO_INSERT_FICHAHA"() OWNER TO postgres;


CREATE TRIGGER "insert"
  AFTER INSERT
  ON fichaha
  FOR EACH ROW
  EXECUTE PROCEDURE "FUNC_LOG_ALTERACAO_INSERT_FICHAHA"();
=======================================================================

CREATE OR REPLACE FUNCTION "FUNC_LOG_ALTERACAO_UPDATE_FICHAHA"()
  RETURNS "trigger" AS
$BODY$
begin

INSERT INTO LOG_ALTERACAO_USUARIO (CD_USUARIO,CD_SISTEMA_EXT,NM_TABELA,ID_KEY,DT_INSERCAO,DT_SINCRONISMO,TP_OPERACAO)
SELECT NEW.CD_AGENTE,
       'PALM' AS CD_SISTEMA_EXT,
       'FICHAHA' AS NM_TABELA,
       ('CD_FAMILIA=' || CAST(NEW.CD_FAMILIA AS VARCHAR(20)) || ';CD_PACIENTE='|| CAST(NEW.CD_PACIENTE AS VARCHAR(20)) 
	|| ';CD_AGENTE=' || CAST(NEW.CD_AGENTE AS VARCHAR(20))  ) AS ID_KEY,
       current_timestamp AS DT_INSERCAO,
       NULL AS DT_SINCRONISMO,
       'U' AS TP_OPERACAO
WHERE  (SELECT COUNT(*)
	FROM  LOG_ALTERACAO_USUARIO_VIEW L
       	WHERE  L.CD_USUARIO = NEW.CD_AGENTE
	AND    l.CD_SISTEMA_EXT = 'PALM'
       	AND    L.NM_TABELA = 'FICHAHA'
       	AND    L.TP_OPERACAO <> 'D'
       	AND    L.DT_SINCRONISMO IS NULL
       	AND    L.ID_KEY = ('CD_FAMILIA=' || CAST(NEW.CD_FAMILIA AS VARCHAR(20)) || ';CD_PACIENTE='|| CAST(NEW.CD_PACIENTE AS VARCHAR(20)) 
	|| ';CD_AGENTE=' || CAST(NEW.CD_AGENTE AS VARCHAR(20))) ) = 0;
	
return null;
end;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE;
ALTER FUNCTION "FUNC_LOG_ALTERACAO_UPDATE_FICHAHA"() OWNER TO postgres;




CREATE TRIGGER "update"
  AFTER UPDATE
  ON fichaha
  FOR EACH ROW
  EXECUTE PROCEDURE "FUNC_LOG_ALTERACAO_UPDATE_FICHAHA"();

=======================================================


CREATE OR REPLACE FUNCTION "FUNC_LOG_ALTERACAO_DELETE_FICHAHA"()
  RETURNS "trigger" AS
$BODY$
begin

DELETE FROM LOG_ALTERACAO_USUARIO
WHERE  CD_USUARIO = OLD.CD_AGENTE
AND    CD_SISTEMA_EXT = 'PALM'
AND    NM_TABELA = 'FICHAHA'
AND    TP_OPERACAO <> 'D'
AND    DT_SINCRONISMO IS NULL
AND    ID_KEY = ('CD_FAMILIA=' || CAST(OLD.CD_FAMILIA AS VARCHAR(20)) || ';CD_PACIENTE='|| CAST(OLD.CD_PACIENTE AS VARCHAR(20)) 
		|| ';CD_AGENTE=' || CAST(OLD.CD_AGENTE AS VARCHAR(20)));

INSERT INTO LOG_ALTERACAO_USUARIO (CD_USUARIO,CD_SISTEMA_EXT,NM_TABELA,ID_KEY,DT_INSERCAO,DT_SINCRONISMO,TP_OPERACAO)
SELECT OLD.CD_AGENTE,
       'PALM' AS CD_SISTEMA_EXT,
       'FICHAHA' AS NM_TABELA,
       ('CD_FAMILIA=' || CAST(OLD.CD_FAMILIA AS VARCHAR(20)) || ';CD_PACIENTE='|| CAST(OLD.CD_PACIENTE AS VARCHAR(20)) 
	|| ';CD_AGENTE=' || CAST(OLD.CD_AGENTE AS VARCHAR(20))  ) AS ID_KEY,
       current_timestamp AS DT_INSERCAO,
       NULL AS DT_SINCRONISMO,
       'D' AS TP_OPERACAOFROM 
WHERE ( SELECT COUNT(*)
        FROM   LOG_ALTERACAO_USUARIO_VIEW L
        WHERE  L.CD_USUARIO = OLD.CD_AGENTE
	AND    L.CD_SISTEMA_EXT = 'PALM'
        AND    L.NM_TABELA = 'FICHAHA'
        AND    L.TP_OPERACAO <> 'D'
        AND    L.DT_SINCRONISMO IS NOT NULL
        AND    L.ID_KEY = ('CD_FAMILIA=' || CAST(OLD.CD_FAMILIA AS VARCHAR(20)) || ';CD_PACIENTE='|| CAST(OLD.CD_PACIENTE AS VARCHAR(20)) 
			|| ';CD_AGENTE=' || CAST(OLD.CD_AGENTE AS VARCHAR(20))) ) > 0;

return null;
end;
$BODY$
  LANGUAGE 'plpgsql' VOLATILE;
ALTER FUNCTION "FUNC_LOG_ALTERACAO_DELETE_FICHAHA"() OWNER TO postgres;


CREATE TRIGGER "delete"
  AFTER DELETE
  ON fichaha
  FOR EACH ROW
  EXECUTE PROCEDURE "FUNC_LOG_ALTERACAO_DELETE_FICHAHA"();


